{
    "contents" : "library(shiny)\nlibrary(DT)\n\nshinyServer(function(input, output) {\n  \n  ### Argument names:\n  ArgNames <- reactive({\n    Names <- names(formals(input$readFunction)[-1])\n    Names <- Names[Names!=\"...\"]\n    return(Names)\n  })\n  \n  # Argument selector:\n  output$ArgSelect <- renderUI({\n    if (length(ArgNames())==0) return(NULL)\n    \n    selectInput(\"arg\",\"Argument:\",ArgNames())\n  })\n  \n  ### Case Data import:\n  \n  CaseDataset <- reactive({\n    if (is.null(input$case)) {\n      # User has not uploaded a file yet\n      return(data.frame())\n    }\n    \n    args <- grep(paste0(\"^\",input$readFunction,\"__\"), names(input), value = TRUE)\n    \n    argList <- list()\n    for (i in seq_along(args))\n    {\n      argList[[i]] <- eval(parse(text=input[[args[i]]]))\n    }\n    names(argList) <- gsub(paste0(\"^\",input$readFunction,\"__\"),\"\",args)\n    \n    argList <- argList[names(argList) %in% ArgNames()]\n    CaseDataset <- as.data.frame(do.call(input$readFunction,c(list(input$case$datapath),argList)))\n    #date <- CaseDataset[,3]\n    return(CaseDataset) \n    #return(list(CaseDataset = CaseDataset, date = date))\n  })\n  \n  \n  #saveCaseData <- function(CaseDataset){\n  # data_loaded <- as.data.frame(CaseDataset)\n  #  if(exists(\"analysis_cas\")){\n  #   remove(analysis_cas)\n  #  analysis_cas <<- data_loaded\n  #} else {\n  # analysis_cas <<- data_loaded      \n  #}\n  #}\n  \n  ### Geo Data import:\n  \n  GeoDataset <- reactive({\n    if (is.null(input$geo)) {\n      # User has not uploaded a file yet\n      return(data.frame())\n    }\n    \n    args <- grep(paste0(\"^\",input$readFunction,\"__\"), names(input), value = TRUE)\n    \n    argList <- list()\n    for (i in seq_along(args))\n    {\n      argList[[i]] <- eval(parse(text=input[[args[i]]]))\n    }\n    names(argList) <- gsub(paste0(\"^\",input$readFunction,\"__\"),\"\",args)\n    \n    argList <- argList[names(argList) %in% ArgNames()]\n    GeoDataset <- as.data.frame(do.call(input$readFunction,c(list(input$geo$datapath),argList)))\n    return(GeoDataset)\n  })\n  \n  \n  #saveGeoData <- function(GeoDataset){\n  # data_loaded <- as.data.frame(GeoDataset)\n  #if(exists(\"analysis_geo\")){\n  # remove(analysis_geo)\n  #analysis_geo <<- data_loaded\n  #} else {\n  #  analysis_geo <<- data_loaded      \n  #}\n  #}\n  \n  \n  \n  # Select variables from Case File:\n  output$caseselect <- renderUI({\n    \n    if (identical(CaseDataset(), '') || identical(CaseDataset(),data.frame())) return(NULL)\n    \n    # Variable selection:    \n    selectInput(\"vars\", \"Case File Attributes:\",\n                names(CaseDataset()),names(CaseDataset()),multiple =TRUE)          \n    \n    #data <- CaseDataset()\n    #coloumns_case <- names(CaseDataset())\n    \n    #selectInput(\"bin_var\",\"Select Bin Input:\",coloumns_case)\n    \n  })  \n  \n  # Select variables from Geo File:\n  output$geoselect <- renderUI({\n    \n    if (identical(GeoDataset(), '') || identical(GeoDataset(),data.frame())) return(NULL)\n    \n    # Variable selection:    \n    selectInput(\"vars_g\", \"Geo File Attributes:\",\n                names(GeoDataset()), names(GeoDataset()), multiple =TRUE)\n    \n  })  \n  \n  #Save Case Data\n  \n  #observeEvent(input$savedata,{\n  #reactive({\n  # data_input <- input$name\n  #})\n  #saveCaseData(CaseDataset())\n  #saveGeoData(GeoDataset())\n  \n  #})\n  \n  #Data Preprocess - Date Format change\n  \n  #Data Binning\n  # function to have equal frequcney binning of data\n  EqualFreq2 <- function(x,n){\n    nx <- length(x)\n    nrepl <- floor(nx/n)\n    nplus <- sample(1:n,nx - nrepl*n)\n    nrep <- rep(nrepl,n)\n    nrep[nplus] <- nrepl+1\n    x[order(x)] <- rep(seq.int(n),nrep)\n    x\n  }\n  \n  \n  \n  observeEvent(input$bindata,\n               reactive({\n                 bin <- EqualFreq2(as.numeric(as.Date(CaseDataset$Date,origin = \"2010-05-05\")),input$n_breaks)\n                 CaseDataset <- cbind(CaseDataset(),bin)\n                 output$caseTable <- renderDataTable({\n                   df <- return(CaseDataset()[,input$vars,drop=FALSE])\n                   DT::datatable(df)\n                 })\n                 \n               })\n               \n  )\n  \n  \n  # Show table Case Data:\n  output$caseTable <- renderDataTable({\n    if (is.null(input$vars) || length(input$vars)==0) return(NULL)\n    return(CaseDataset()[,input$vars,drop=FALSE])\n    \n    #     #return(discretize(CaseDataset(),disc = \"equalfreq\",nbins = 2))\n  })\n  \n  # Show table Geo Data:\n  output$geoTable <- renderDataTable({\n    return(GeoDataset()[,input$vars_g,drop=FALSE])\n  })\n  \n})",
    "created" : 1454725534858.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3043481098",
    "id" : "848D4C9A",
    "lastKnownWriteTime" : 1454725767,
    "path" : "~/RFiles/binning/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}