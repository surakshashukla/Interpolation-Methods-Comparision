{
    "contents" : "library(shiny)\n\n\nshinyServer(function(input, output) {\n  # while running codes for first time, please remove '#' from below two lines, then run it again. R will install those packages.\n  \n  #install.packages(\"TTR\")    \n  #install.packages(\"forecast\")\n  \n  library(forecast)\n  \n  library(TTR)\n  \n  data <- read.csv(\"sale.csv\")  ## Loading data\n  \n  \n  \n  select.product <- reactive({                                  # function that will filter that product based on the user's input\n    product_data <- data[data$PRODUCT_ID == input$product_id,] \n    return(product_data = product_data)\n  }) \n  \n  \n  select.product.name <- reactive({                     #function that is giving product name title and other outputs in top left box as lead time, safety stock, reorder point \n    p_data = select.product()\n    p_name <- p_data[1,4]\n    lead_time <- p_data[1,5]\n    qty_on_hand <- p_data[12,6]\n    \n    if(input$method == 'naive'){\n      x = forecast.naive()$naive_forecast$fitted;\n      d = forecast.naive()$naive_forecast$mean;\n    }else if(input$method == 'ma'){\n      x = forecast.sma()$sma_fitted;\n      d = forecast.sma()$sma_forecast$mean;\n    }else if(input$method == 'es'){\n      x = forecast.es()$es_forecast$fitted;\n      d = forecast.es()$es_forecast$mean;\n    }\n    \n    sd_per_year <- sd(x, na.rm = TRUE)\n    sd_per_day <- sd_per_year/ sqrt(365)\n    \n    service_level <- 0.95\n    Z_a <-  qnorm(service_level)\n    \n    safety_stock <- round(Z_a*sd_per_day*sqrt(lead_time))\n    \n    daily_avg <- d/30\n    \n    reorder_point <-round((lead_time* daily_avg) + safety_stock)\n    \n    return(list(p_name = p_name, lead_time = lead_time, qty_on_hand = qty_on_hand, safety_stock = safety_stock, reorder_point = reorder_point))\n  })\n  \n  output$product_text <- renderText(                                  #to pass output values to user interface, $name will be recognized as output variable in user interface\n    paste(\"Product Name: \", select.product.name()$p_name )\n  )\n  \n  output$lead_time <- renderText(\n    paste(\"Lead Time: \", select.product.name()$lead_time )\n  )\n  \n  output$qty_on_hand <- renderText(\n    paste(\"Quantity On Hand: \", select.product.name()$qty_on_hand )\n  )\n  \n  output$safety_stock <- renderText(\n    paste(\"Safety Stock: \", select.product.name()$safety_stock )\n  )\n  \n  output$reorder_point <- renderText(\n    paste(\"Reorder Point: \", select.product.name()$reorder_point )\n  )\n  \n  forecast.naive <- reactive({          # forecast calculation for naive method\n    p_data = select.product()\n    x = p_data$UNIT_SALES\n    \n    naive_forecast <- naive(x, h=1, level=c(80,95), fan=FALSE, lambda=NULL)   # using naive method from 'forecast' package from R\n    naive_accuracy <- accuracy(naive_forecast)                             # accuracu is R's function that calculate training and test error rates of forecast\n    \n    return(list(naive_forecast = naive_forecast, naive_accuracy = naive_accuracy) )\n  })\n  \n  \n  forecast.sma <- reactive({         # forecast calculation for simple moving average\n    p_data = select.product()\n    x = p_data$UNIT_SALES\n    ts.x <-ts(x)\n    sma <- SMA(ts.x, 3)              # using sma() function from 'forecast' package in R\n    \n    sma_forecast <- forecast(sma, 1)\n    sma_fitted <- sma\n    sma_accuracy <- accuracy(sma_forecast)\n    \n    return(list(sma_fitted = sma_fitted, sma_forecast = sma_forecast, sma_accuracy = sma_accuracy) )\n  })\n  \n  forecast.es <- reactive({                      ### forecast calculation using exponential smoothing method\n    p_data = select.product()\n    x = p_data$UNIT_SALES\n    \n    es_forecast <- ses(x, h = 1, level = c(80, 95), alpha=0.3)   \n    es_accuracy <- accuracy(es_forecast)\n    es_plot <- plot(es_forecast)\n    \n    return(list(es_forecast = es_forecast, es_plot = es_plot, es_accuracy = es_accuracy) )\n  })\n  \n  \n  output$forecast_naive_output <- renderPrint({\n    forecast_mean <- forecast.naive()\n    return(forecast_mean$naive_forecast )\n  })\n  \n  output$forecast_naive_accuracy <- renderPrint({\n    forecast_mean <- forecast.naive()\n    return(forecast_mean$naive_accuracy )\n  })\n  \n  output$naive_plot <- renderPlot({\n    forecast <- forecast.naive()\n    plot(forecast$naive_forecast)\n  })\n  \n  output$forecast_sma_output <- renderPrint({\n    forecast_mean <- forecast.sma()\n    return(forecast_mean$sma_forecast)\n  })\n  \n  output$forecast_sma_accuracy <- renderPrint({\n    forecast_mean <- forecast.sma()\n    return(forecast_mean$sma_accuracy)\n  })\n  \n  output$sma_plot <- renderPlot({\n    forecast <- forecast.sma()\n    plot(forecast.sma()$sma_forecast, main = \"Forecasts from Moving Average\")\n  })\n  \n  output$forecast_es_output <- renderPrint({\n    forecast_mean <- forecast.es()\n    return(forecast_mean$es_forecast )\n  })\n  \n  output$forecast_es_accuracy <- renderPrint({\n    forecast_mean <- forecast.es()\n    return(forecast_mean$es_accuracy )\n  })\n  \n  output$es_plot <- renderPlot({\n    forecast <- forecast.es()\n    plot(forecast$es_forecast)\n  })\n\n  \n  output$product_plot <- renderPlot({\n    p_data = select.product()\n    barplot(p_data$UNIT_SALES , col = \"blue\", ylab = \" Unit Sales\")\n  })\n  \n  output$product_dataHead <- renderDataTable(select.product())\n  \n})\n\n",
    "created" : 1453918760071.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1618157590",
    "id" : "8C941194",
    "lastKnownWriteTime" : 1448935254,
    "path" : "~/RFiles/inventory/inventory/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}